/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	
	__webpack_require__(5);
	
	__webpack_require__(6);
	
	__webpack_require__(8);
	
	//import './scrollsnap';

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(2);
	
	var _getParentSection = __webpack_require__(3);
	
	var _getParentSection2 = _interopRequireDefault(_getParentSection);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	__webpack_require__(4).polyfill();
	
	var slideSpeed = 500;
	var fadeSpeed = 300;
	
	/* =================================================
	Move gallery content into parent container
	================================================= */
	var contentPages = Array.prototype.slice.call(document.querySelectorAll('.gallery-section'));
	
	contentPages.forEach(function (p) {
		var parentId = p.id.replace('-gallery', '');
		var galleryContent = p.querySelector('.section-inner');
		galleryContent.setAttribute('tabindex', '-1');
		document.getElementById(parentId).appendChild(galleryContent);
		p.parentNode.removeChild(p);
		galleryContent.id = p.id;
	});
	
	/* =================================================
	Display gallery content on CTA click
	================================================= */
	var galleryCta = Array.prototype.slice.call(document.querySelectorAll('.gallery-cta'));
	
	var showGallery = function showGallery(elem) {
		document.body.classList.add('gallery-open', 'disabled-onepage-scroll');
		elem.galleryData.parentSection.classList.add('gallery-open');
		elem.galleryData.focusables.forEach(function (f) {
			f.setAttribute('tabindex', '0');
		});
		setTimeout(function () {
			elem.galleryData.targetGallery.setAttribute('tabindex', '0');
			elem.galleryData.targetGallery.focus();
		}, slideSpeed);
	};
	
	var hideGallery = function hideGallery(elem) {
		document.body.classList.remove('gallery-open', 'disabled-onepage-scroll');
		elem.galleryData.parentSection.classList.remove('gallery-open');
		elem.galleryData.targetGallery.setAttribute('tabindex', '-1');
		elem.galleryData.focusables.forEach(function (f) {
			f.setAttribute('tabindex', -1);
		});
	};
	
	var hideAllGalleries = function hideAllGalleries() {
		galleryCta.forEach(function (g) {
			hideGallery(g);
		});
	};
	
	var getBackButton = function getBackButton(elem, isBottom) {
		var backButton = document.createElement('button');
		backButton.className = 'gallery-back';
		backButton.innerHTML = '<b>Back</b><span> to main page</span>';
		backButton.type = 'button';
		backButton.addEventListener('click', function () {
			hideGallery(elem);
		});
	
		if (isBottom) {
			backButton.classList.add('gallery-back-bottom');
			backButton.addEventListener('blur', function () {
				if (document.body.classList.contains('gallery-open')) {
					elem.galleryData.targetGallery.focus();
				}
			});
		}
	
		return backButton;
	};
	
	galleryCta.forEach(function (g) {
		//set properties to use for showing/hiding gallery
		g.galleryData = {
			targetGallery: document.getElementById(g.href.split('#')[1]),
			parentSection: (0, _getParentSection2.default)(g)
		};
	
		//append back buttons to the gallery section
		g.galleryData.targetGallery.insertBefore(getBackButton(g), g.galleryData.targetGallery.firstChild);
		g.galleryData.targetGallery.appendChild(getBackButton(g, true));
	
		//set click trigger on CTA to open gallery
		g.addEventListener('click', function (e) {
			e.preventDefault();
			showGallery(g);
		});
	
		g.galleryData.focusables = Array.prototype.slice.call(g.galleryData.targetGallery.querySelectorAll('a, button'));
	});
	
	hideAllGalleries();
	
	/* =================================================
	Close gallery on menu click
	================================================= */
	var menuLinks = Array.prototype.slice.call(document.querySelectorAll('#menu a'));
	
	menuLinks.forEach(function (link) {
		link.addEventListener('click', hideAllGalleries);
	});
	
	/* =================================================
	Dynamic content fetch + modal display
	================================================= */
	var contentHeaders = new Headers({
		"Content-Type": "text/html"
	});
	
	var contentLinks = Array.prototype.slice.call(document.querySelectorAll('.gallery-content a'));
	
	var getContent = function getContent(href) {
		fetch(href, {
			headers: contentHeaders
		}).then(function (response) {
			//TODO - error handling
			return response.text().then(showContent);
		});
	};
	
	var closeContent = function closeContent() {
		//add class to fade out content, then remove DOM element
		var content = Array.prototype.slice.call(document.querySelectorAll('.overlay'));
		content.forEach(function (overlay) {
			if (overlay) {
				overlay.classList.remove('fade-in');
				overlay.classList.add('fade-out');
				setTimeout(function () {
					document.body.removeChild(overlay);
				}, fadeSpeed);
			}
		});
	};
	
	var showContent = function showContent(text) {
		var parser = new DOMParser();
		var doc = parser.parseFromString(text, 'text/html');
	
		//remove any existing overlays
		if (document.querySelectorAll('.overlay').length > 0) {
			closeContent();
		}
	
		//add DOM element with close button, then add class to fade in content
		var content = doc.querySelector('#content');
		if (content) {
			var overlay = document.createElement('div');
			overlay.className = 'overlay';
			overlay.innerHTML = content.innerHTML;
			document.body.appendChild(overlay);
	
			var closeButton = document.createElement('button');
			closeButton.setAttribute('type', 'button');
			closeButton.innerHTML = 'Close';
			closeButton.className = 'gallery-close gallery-back';
			closeButton.addEventListener('click', closeContent);
	
			overlay.appendChild(closeButton);
			overlay.classList.add('fade-in');
		}
	};
	
	contentLinks.forEach(function (link) {
		link.addEventListener('click', function (e) {
			e.preventDefault();
			getContent(link.href);
		});
	});

/***/ },
/* 2 */
/***/ function(module, exports) {

	(function() {
	  'use strict';
	
	  // if __disableNativeFetch is set to true, the it will always polyfill fetch
	  // with Ajax.
	  if (!self.__disableNativeFetch && self.fetch) {
	    return
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var list = this.map[name]
	    if (!list) {
	      list = []
	      this.map[name] = list
	    }
	    list.push(value)
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    var values = this.map[normalizeName(name)]
	    return values ? values[0] : null
	  }
	
	  Headers.prototype.getAll = function(name) {
	    return this.map[normalizeName(name)] || []
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = [normalizeValue(value)]
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    Object.getOwnPropertyNames(this.map).forEach(function(name) {
	      this.map[name].forEach(function(value) {
	        callback.call(thisArg, value, name, this)
	      }, this)
	    }, this)
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    reader.readAsArrayBuffer(blob)
	    return fileReaderReady(reader)
	  }
	
	  function readBlobAsText(blob, options) {
	    var reader = new FileReader()
	    var contentType = options.headers.map['content-type'] ? options.headers.map['content-type'].toString() : ''
	    var regex = /charset\=[0-9a-zA-Z\-\_]*;?/
	    var _charset = blob.type.match(regex) || contentType.match(regex)
	    var args = [blob]
	
	    if(_charset) {
	      args.push(_charset[0].replace(/^charset\=/, '').replace(/;$/, ''))
	    }
	
	    reader.readAsText.apply(reader, args)
	    return fileReaderReady(reader)
	  }
	
	  var support = {
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob();
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	
	    this._initBody = function(body, options) {
	      this._bodyInit = body
	      if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	        this._options = options
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (!body) {
	        this._bodyText = ''
	      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
	        // Only support ArrayBuffers for POST method.
	        // Receiving ArrayBuffers happens via Blobs, instead.
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }
	
	      this.text = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return readBlobAsText(this._bodyBlob, this._options)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as text')
	        } else {
	          return Promise.resolve(this._bodyText)
	        }
	      }
	    } else {
	      this.text = function() {
	        var rejected = consumed(this)
	        return rejected ? rejected : Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	    if (Request.prototype.isPrototypeOf(input)) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = input
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body, options)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this)
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function headers(xhr) {
	    var head = new Headers()
	    var pairs = xhr.getAllResponseHeaders().trim().split('\n')
	    pairs.forEach(function(header) {
	      var split = header.trim().split(':')
	      var key = split.shift().trim()
	      var value = split.join(':').trim()
	      head.append(key, value)
	    })
	    return head
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this._initBody(bodyInit, options)
	    this.type = 'default'
	    this.status = options.status
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = options.statusText
	    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
	    this.url = options.url || ''
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers;
	  self.Request = Request;
	  self.Response = Response;
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request
	      if (Request.prototype.isPrototypeOf(input) && !init) {
	        request = input
	      } else {
	        request = new Request(input, init)
	      }
	
	      var xhr = new XMLHttpRequest()
	
	      function responseURL() {
	        if ('responseURL' in xhr) {
	          return xhr.responseURL
	        }
	
	        // Avoid security warnings on getResponseHeader when not allowed by CORS
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	          return xhr.getResponseHeader('X-Request-URL')
	        }
	
	        return;
	      }
	
	      var __onLoadHandled = false;
	
	      function onload() {
	        if (xhr.readyState !== 4) {
	          return
	        }
	        var status = (xhr.status === 1223) ? 204 : xhr.status
	        if (status < 100 || status > 599) {
	          if (__onLoadHandled) { return; } else { __onLoadHandled = true; }
	          reject(new TypeError('Network request failed'))
	          return
	        }
	        var options = {
	          status: status,
	          statusText: xhr.statusText,
	          headers: headers(xhr),
	          url: responseURL()
	        }
	        var body = 'response' in xhr ? xhr.response : xhr.responseText;
	
	        if (__onLoadHandled) { return; } else { __onLoadHandled = true; }
	        resolve(new Response(body, options))
	      }
	      xhr.onreadystatechange = onload;
	      xhr.onload = onload;
	      xhr.onerror = function() {
	        if (__onLoadHandled) { return; } else { __onLoadHandled = true; }
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      // `withCredentials` should be setted after calling `.open` in IE10
	      // http://stackoverflow.com/a/19667959/1219343
	      try {
	        if (request.credentials === 'include') {
	          if ('withCredentials' in xhr) {
	            xhr.withCredentials = true;
	          } else {
	            console && console.warn && console.warn('withCredentials is not supported, you can ignore this warning');
	          }
	        }
	      } catch (e) {
	        console && console.warn && console.warn('set withCredentials error:' + e);
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	
	  // Support CommonJS
	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = self.fetch;
	  }
	})();


/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (elem) {
		if (elem.nodeName.toLowerCase() === 'section') {
			return elem;
		}
	
		var parentElement = elem.parentElement;
	
		do {
			parentElement = parentElement.parentElement;
		} while (parentElement.nodeName.toLowerCase() !== 'section');
	
		return parentElement;
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var require;/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   4.0.5
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
	    return function () {
	      vertxNext(flush);
	    };
	  }
	
	  return useSetTimeout();
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"vertx\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	//# sourceMappingURL=es6-promise.map

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	var navLink = document.querySelector('#navlink');
	var menuLinks = Array.prototype.slice.call(document.querySelectorAll('#menu a'));
	var menuOpen = false;
	
	var openMenu = function openMenu() {
		document.body.classList.remove('menu-closed');
		document.body.classList.add('menu-open', 'disabled-onepage-scroll');
	};
	
	var closeMenu = function closeMenu() {
		document.body.classList.remove('menu-open', 'disabled-onepage-scroll');
		document.body.classList.add('menu-closed', 'menu-closing');
		setTimeout(function () {
			document.body.classList.remove('menu-closing');
		}, 300);
	};
	
	var toggleMenu = function toggleMenu(e) {
		e.preventDefault();
		if (document.body.classList.contains('menu-open')) {
			closeMenu();
		} else {
			openMenu();
		}
	};
	
	navLink.addEventListener('click', toggleMenu);
	menuLinks.forEach(function (link) {
		link.addEventListener('click', closeMenu);
	});

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _onePageScroll = __webpack_require__(7);
	
	var _onePageScroll2 = _interopRequireDefault(_onePageScroll);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//move the icon container out of the content scroller, if it exists
	var plumnom = document.querySelector('#plumnom'); // import ScrollMagic from 'scrollmagic';
	
	
	if (plumnom) {
		document.body.appendChild(plumnom);
	}
	
	var setAnimationClass = function setAnimationClass(index, nextEl, prevEl) {
		if (prevEl && nextEl.id == prevEl.id) {
			return false;
		}
	
		if (nextEl && !plumnom.classList.contains('page-' + nextEl.id)) {
			plumnom.className = 'page-' + nextEl.id;
		}
	
		plumnom.classList.add('animating');
	
		if (prevEl && !plumnom.classList.contains('from-page-' + prevEl.id)) {
			plumnom.className += ' from-page-' + prevEl.id;
		}
	
		setTimeout(function () {
			plumnom.classList.add('animation-progress');
		}, 50);
	
		setTimeout(function () {
			plumnom.classList.remove('animation-progress', 'animating');
		}, 501);
	};
	
	//change classes on scroll
	if (document.body.classList.contains('page-index')) {
		(0, _onePageScroll2.default)('#content', {
			animationTime: 500,
			beforeMove: setAnimationClass,
			pagination: false
		});
	
		//update menu links to change pages with onePageScroll
		var menuLinks = Array.prototype.slice.call(document.querySelectorAll('#menu a'));
	
		menuLinks.forEach(function (m, i) {
			m.setAttribute('data-onepagescroll-index', i + 1);
		});
	}
	
	// //triggers for animation - top and bottom of each section
	// let sectionHeight = 0;
	
	// let getSectionHeight = () => {
	// 	return sectionHeight;
	// };
	
	// let setSectionHeight = () => {
	// 	sectionHeight = window.innerHeight;
	// };
	
	// setSectionHeight();
	// document.querySelector('#content').addEventListener('scroll', setSectionHeight);
	
	// document.querySelector('#code').getBoundingClientRect();
	
	// let controller = new ScrollMagic.Controller();
	
	// let containerTween = TweenMax.to('#plumnom', 200, {
	// 	css: {
	// 		yPercent: -200
	// 	},
	// 	force3D: true
	// })
	
	// let containerScene = new ScrollMagic.Scene({triggerElement: '#code'})
	// 							.setClassToggle('#plumnom', "plum-front")
	// 							.addTo(controller);

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getParentSection = __webpack_require__(3);
	
	var _getParentSection2 = _interopRequireDefault(_getParentSection);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* ===========================================================
	 * onepagescroll.js v1.2.2
	 * ===========================================================
	 * Copyright 2014 Pete Rojwongsuriya.
	 * http://www.thepetedesign.com
	 *
	 * Create an Apple-like website that let user scroll
	 * one page at a time
	 *
	 * Credit: Eike Send for the awesome swipe event
	 * https://github.com/peachananr/purejs-onepage-scroll
	 * 
	 * License: GPL v3
	 *
	 * ========================================================== */
	
	module.exports = function onePageScroll(element, options) {
	  var self = {};
	
	  var defaults = {
	    sectionContainer: "section",
	    easing: "ease",
	    animationTime: 1000,
	    pagination: true,
	    updateURL: false,
	    keyboard: true,
	    beforeMove: null,
	    afterMove: null,
	    loop: false,
	    responsiveFallback: false
	  },
	      _root = self,
	      settings = Object.extend({}, defaults, options),
	      el = document.querySelector(element),
	      sections = document.querySelectorAll(settings.sectionContainer),
	      total = sections.length,
	      status = "off",
	      topPos = 0,
	      lastAnimation = 0,
	      quietPeriod = 500,
	      paginationList = "",
	      body = document.querySelector("body");
	
	  var init = function init() {
	    /*-------------------------------------------*/
	    /*  Prepare Everything                       */
	    /*-------------------------------------------*/
	
	    _addClass(el, "onepage-wrapper");
	    el.style.position = "relative";
	
	    for (var i = 0; i < sections.length; i++) {
	      _addClass(sections[i], "ops-section");
	      sections[i].dataset.index = i + 1;
	      topPos = topPos + 100;
	
	      if (settings.pagination == true) {
	        paginationList += "<li><a data-index='" + (i + 1) + "' href='#" + (i + 1) + "'></a></li>";
	      }
	    }
	
	    _swipeEvents(el);
	    document.addEventListener("swipeDown", function (event) {
	      if (!_hasClass(body, "disabled-onepage-scroll")) event.preventDefault();
	      moveUp(el);
	    });
	    document.addEventListener("swipeUp", function (event) {
	      if (!_hasClass(body, "disabled-onepage-scroll")) event.preventDefault();
	      moveDown(el);
	    });
	
	    // Create Pagination and Display Them
	
	    if (settings.pagination == true) {
	      var pagination = document.createElement("ul");
	      pagination.setAttribute("class", "onepage-pagination");
	
	      body.appendChild(pagination);
	      pagination.innerHTML = paginationList;
	      var posTop = document.querySelector(".onepage-pagination").offsetHeight / 2 * -1;
	      document.querySelector(".onepage-pagination").style.marginTop = posTop;
	    }
	
	    if (window.location.hash != "" && window.location.hash != "#1") {
	      var init_index = window.location.hash.replace("#", ""),
	          next,
	          next_index;
	
	      //try to find container by ID
	      if (isNaN(parseInt(init_index))) {
	        for (var i = 0; i < sections.length; i++) {
	          if (sections[i].id === init_index) {
	            init_index = i + 1;
	            break;
	          }
	        }
	      }
	
	      if (init_index) {
	        next = document.querySelector(settings.sectionContainer + "[data-index='" + init_index + "']"), next_index = next.dataset.index;
	        _addClass(document.querySelector(settings.sectionContainer + "[data-index='" + init_index + "']"), "active");
	        _addClass(body, "viewing-page-" + init_index);
	        if (settings.pagination == true) _addClass(document.querySelector(".onepage-pagination li a" + "[data-index='" + init_index + "']"), "active");
	
	        if (next) {
	          _addClass(next, "active");
	          if (settings.pagination == true) _addClass(document.querySelector(".onepage-pagination li a" + "[data-index='" + init_index + "']"), "active");
	
	          body.className = body.className.replace(/\bviewing-page-\d.*?\b/g, '');
	          _addClass(body, "viewing-page-" + next_index);
	          if (history.replaceState && settings.updateURL == true) {
	            var href = window.location.href.substr(0, window.location.href.indexOf('#')) + "#" + init_index;
	            history.pushState({}, document.title, href);
	          }
	        }
	        var pos = (init_index - 1) * 100 * -1;
	        _transformPage(el, settings, pos, init_index, sections[init_index - 1]);
	      }
	    } else {
	      _addClass(document.querySelector(settings.sectionContainer + "[data-index='1']"), "active");
	      _addClass(body, "viewing-page-1");
	      if (settings.pagination == true) _addClass(document.querySelector(".onepage-pagination li a[data-index='1']"), "active");
	    }
	
	    var _paginationHandler = function _paginationHandler() {
	      var page_index = self.dataset.index;
	      moveTo(el, page_index);
	    };
	
	    if (settings.pagination == true) {
	      var pagination_links = document.querySelectorAll(".onepage-pagination li a");
	
	      for (var i = 0; i < pagination_links.length; i++) {
	        pagination_links[i].addEventListener('click', _paginationHandler);
	      }
	    }
	
	    var _mouseWheelHandler = function _mouseWheelHandler(event) {
	      if (!_hasClass(body, "disabled-onepage-scroll")) {
	        event.preventDefault();
	        var delta = event.wheelDelta || -event.detail;
	        if (Math.abs(delta) > 10) {
	          _init_scroll(event, delta);
	        }
	      }
	    };
	
	    document.addEventListener('mousewheel', _mouseWheelHandler);
	    document.addEventListener('DOMMouseScroll', _mouseWheelHandler);
	
	    if (settings.responsiveFallback != false) {
	      window.onresize = function () {
	        _responsive();
	      };
	
	      _responsive();
	    }
	
	    var _keydownHandler = function _keydownHandler(e) {
	      var tag = e.target.tagName.toLowerCase();
	
	      if (!_hasClass(body, "disabled-onepage-scroll")) {
	        switch (e.which) {
	          case 38:
	            if (tag != 'input' && tag != 'textarea') moveUp(el);
	            break;
	          case 40:
	            if (tag != 'input' && tag != 'textarea') moveDown(el);
	            break;
	          default:
	            return;
	        }
	      }
	      return;
	    };
	
	    if (settings.keyboard == true) {
	      document.onkeydown = _keydownHandler;
	    }
	
	    //scroll to page on focus
	    var focusables = Array.prototype.slice.call(el.querySelectorAll('a, button, [tabindex]'));
	    var sectionsArray = Array.prototype.slice.call(sections);
	
	    focusables.forEach(function (f) {
	      f.addEventListener('focus', function (e) {
	        if (!_hasClass(body, "disabled-onepage-scroll")) {
	          var parent = (0, _getParentSection2.default)(e.target);
	          var index = sectionsArray.indexOf(parent) + 1;
	          moveTo(el, index);
	
	          //force repaint to prevent jumps from focus
	          el.style.display = 'none';
	          el.offsetHeight;
	          el.style.display = '';
	        }
	      });
	
	      //target any menu links
	      if (f.hasAttribute('data-onepagescroll-index')) {
	        f.addEventListener('click', function (e) {
	          e.preventDefault();
	          moveTo(el, f.getAttribute('data-onepagescroll-index'));
	        });
	      }
	    });
	
	    return false;
	  };
	
	  /*-------------------------------------------------------*/
	  /*  Private Functions                                    */
	  /*-------------------------------------------------------*/
	  /*------------------------------------------------*/
	  /*  Credit: Eike Send for the awesome swipe event */
	  /*------------------------------------------------*/
	  var _swipeEvents = function _swipeEvents(el) {
	    var startX, startY;
	
	    document.addEventListener("touchstart", touchstart);
	
	    function touchstart(event) {
	      var touches = event.touches;
	      if (touches && touches.length) {
	        startX = touches[0].pageX;
	        startY = touches[0].pageY;
	        document.addEventListener("touchmove", touchmove);
	      }
	    }
	
	    function touchmove(event) {
	      var touches = event.touches;
	      if (touches && touches.length) {
	        event.preventDefault();
	        var deltaX = startX - touches[0].pageX;
	        var deltaY = startY - touches[0].pageY;
	
	        if (deltaX >= 50) {
	          var event = new Event('swipeLeft');
	          document.dispatchEvent(event);
	        }
	        if (deltaX <= -50) {
	          var event = new Event('swipeRight');
	          document.dispatchEvent(event);
	        }
	        if (deltaY >= 50) {
	          var event = new Event('swipeUp');
	          document.dispatchEvent(event);
	        }
	        if (deltaY <= -50) {
	          var event = new Event('swipeDown');
	          document.dispatchEvent(event);
	        }
	
	        if (Math.abs(deltaX) >= 50 || Math.abs(deltaY) >= 50) {
	          document.removeEventListener('touchmove', touchmove);
	        }
	      }
	    }
	  };
	  /*-----------------------------------------------------------*/
	  /*  Utility to add/remove class easily with javascript       */
	  /*-----------------------------------------------------------*/
	
	  var _trim = function _trim(str) {
	    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	  };
	
	  var _hasClass = function _hasClass(ele, cls) {
	    if (!ele) {
	      return false;
	    }
	    if (ele.className) {
	      return ele.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
	    } else {
	      return ele.className = cls;
	    }
	  };
	
	  var _addClass = function _addClass(ele, cls) {
	    if (!ele) {
	      return false;
	    }
	    if (!_hasClass(ele, cls)) ele.className += " " + cls;
	    ele.className = _trim(ele.className);
	  };
	
	  var _removeClass = function _removeClass(ele, cls) {
	    if (!ele) {
	      return false;
	    }
	    if (_hasClass(ele, cls)) {
	      var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
	      ele.className = ele.className.replace(reg, ' ');
	    }
	    ele.className = _trim(ele.className);
	  };
	
	  /*-----------------------------------------------------------*/
	  /*  Transtionend Normalizer by Modernizr                     */
	  /*-----------------------------------------------------------*/
	
	  var _whichTransitionEvent = function _whichTransitionEvent() {
	    var t;
	    var el = document.createElement('fakeelement');
	    var transitions = {
	      'transition': 'transitionend',
	      'OTransition': 'oTransitionEnd',
	      'MozTransition': 'transitionend',
	      'WebkitTransition': 'webkitTransitionEnd'
	    };
	
	    for (t in transitions) {
	      if (el.style[t] !== undefined) {
	        return transitions[t];
	      }
	    }
	  };
	
	  /*-----------------------------------------------------------*/
	  /*  Function to perform scroll to top animation              */
	  /*-----------------------------------------------------------*/
	
	  var _scrollTo = function _scrollTo(element, to, duration) {
	    if (duration < 0) return;
	    var difference = to - element.scrollTop;
	    var perTick = difference / duration * 10;
	
	    setTimeout(function () {
	      element.scrollTop = element.scrollTop + perTick;
	      if (element.scrollTop == to) return;
	      _scrollTo(element, to, duration - 10);
	    }, 10);
	  };
	
	  /*---------------------------------*/
	  /*  Function to transform the page */
	  /*---------------------------------*/
	
	  var _transformPage = function _transformPage(el2, settings, pos, index, next_el, current_el) {
	    if (typeof settings.beforeMove == 'function') settings.beforeMove(index, next_el, current_el);
	
	    var transformCSS = "-webkit-transform: translate3d(0, " + pos + "%, 0); -webkit-transition: -webkit-transform " + settings.animationTime + "ms " + settings.easing + "; -moz-transform: translate3d(0, " + pos + "%, 0); -moz-transition: -moz-transform " + settings.animationTime + "ms " + settings.easing + "; -ms-transform: translate3d(0, " + pos + "%, 0); -ms-transition: -ms-transform " + settings.animationTime + "ms " + settings.easing + "; transform: translate3d(0, " + pos + "%, 0); transition: transform " + settings.animationTime + "ms " + settings.easing + ";";
	
	    el2.style.cssText = transformCSS;
	
	    var transitionEnd = _whichTransitionEvent();
	    el2.addEventListener(transitionEnd, endAnimation, false);
	
	    function endAnimation() {
	      if (typeof settings.afterMove == 'function') settings.afterMove(index, next_el);
	      el2.removeEventListener(transitionEnd, endAnimation);
	    }
	  };
	
	  /*-------------------------------------------*/
	  /*  Responsive Fallback trigger              */
	  /*-------------------------------------------*/
	
	  var _responsive = function _responsive() {
	
	    if (document.body.clientWidth < settings.responsiveFallback) {
	
	      _addClass(body, "disabled-onepage-scroll");
	      document.removeEventListener('mousewheel', _mouseWheelHandler);
	      document.removeEventListener('DOMMouseScroll', _mouseWheelHandler);
	      _swipeEvents(el);
	      document.removeEventListener("swipeDown");
	      document.removeEventListener("swipeUp");
	    } else {
	
	      if (_hasClass(body, "disabled-onepage-scroll")) {
	        _removeClass(body, "disabled-onepage-scroll");
	        _scrollTo(document.documentElement, 0, 2000);
	      }
	
	      _swipeEvents(el);
	      document.addEventListener("swipeDown", function (event) {
	        if (!_hasClass(body, "disabled-onepage-scroll")) event.preventDefault();
	        moveUp(el);
	      });
	      document.addEventListener("swipeUp", function (event) {
	        if (!_hasClass(body, "disabled-onepage-scroll")) event.preventDefault();
	        moveDown(el);
	      });
	
	      document.addEventListener('mousewheel', _mouseWheelHandler);
	      document.addEventListener('DOMMouseScroll', _mouseWheelHandler);
	    }
	  };
	
	  /*-------------------------------------------*/
	  /*  Initialize scroll detection              */
	  /*-------------------------------------------*/
	
	  var _init_scroll = function _init_scroll(event, delta) {
	    var deltaOfInterest = delta,
	        timeNow = new Date().getTime();
	
	    // Cancel scroll if currently animating or within quiet period
	    if (timeNow - lastAnimation < quietPeriod + settings.animationTime) {
	      event.preventDefault();
	      return;
	    }
	
	    if (deltaOfInterest < 0) {
	      moveDown(el);
	    } else {
	      moveUp(el);
	    }
	
	    lastAnimation = timeNow;
	  };
	
	  /*-------------------------------------------------------*/
	  /*  Public Functions                                     */
	  /*-------------------------------------------------------*/
	
	  /*---------------------------------*/
	  /*  Function to move down section  */
	  /*---------------------------------*/
	
	  var moveDown = function moveDown(el3) {
	
	    var pos = 0;
	
	    if (typeof el3 == "string") el3 = document.querySelector(el3);
	
	    var index = document.querySelector(settings.sectionContainer + ".active").dataset.index,
	        current = document.querySelector(settings.sectionContainer + "[data-index='" + index + "']"),
	        next = document.querySelector(settings.sectionContainer + "[data-index='" + (parseInt(index) + 1) + "']");
	
	    if (!next) {
	      if (settings.loop == true) {
	        pos = 0;
	        next = document.querySelector(settings.sectionContainer + "[data-index='1']");
	      } else {
	        return;
	      }
	    } else {
	      pos = index * 100 * -1;
	    }
	    var next_index = next.dataset.index;
	    _removeClass(current, "active");
	    _addClass(next, "active");
	
	    if (settings.pagination == true) {
	      _removeClass(document.querySelector(".onepage-pagination li a" + "[data-index='" + index + "']"), "active");
	      _addClass(document.querySelector(".onepage-pagination li a" + "[data-index='" + next_index + "']"), "active");
	    }
	
	    body.className = body.className.replace(/\bviewing-page-\d.*?\b/g, '');
	    _addClass(body, "viewing-page-" + next_index);
	
	    if (history.replaceState && settings.updateURL == true) {
	      var href = window.location.href.substr(0, window.location.href.indexOf('#')) + "#" + (parseInt(index) + 1);
	      history.pushState({}, document.title, href);
	    }
	    _transformPage(el3, settings, pos, next_index, next, current);
	  };
	
	  /*---------------------------------*/
	  /*  Function to move up section    */
	  /*---------------------------------*/
	
	  var moveUp = function moveUp(el4) {
	
	    var pos = 0;
	
	    if (typeof el4 == "string") el4 = document.querySelector(el4);
	
	    var index = document.querySelector(settings.sectionContainer + ".active").dataset.index,
	        current = document.querySelector(settings.sectionContainer + "[data-index='" + index + "']"),
	        next = document.querySelector(settings.sectionContainer + "[data-index='" + (parseInt(index) - 1) + "']");
	
	    if (!next) {
	      if (settings.loop == true) {
	        pos = (total - 1) * 100 * -1;
	        next = document.querySelector(settings.sectionContainer + "[data-index='" + total + "']");
	      } else {
	        return;
	      }
	    } else {
	      pos = (next.dataset.index - 1) * 100 * -1;
	    }
	    var next_index = next.dataset.index;
	    _removeClass(current, "active");
	    _addClass(next, "active");
	
	    if (settings.pagination == true) {
	      _removeClass(document.querySelector(".onepage-pagination li a" + "[data-index='" + index + "']"), "active");
	      _addClass(document.querySelector(".onepage-pagination li a" + "[data-index='" + next_index + "']"), "active");
	    }
	    body.className = body.className.replace(/\bviewing-page-\d.*?\b/g, '');
	    _addClass(body, "viewing-page-" + next_index);
	
	    if (history.replaceState && settings.updateURL == true) {
	      var href = window.location.href.substr(0, window.location.href.indexOf('#')) + "#" + (parseInt(index) - 1);
	      history.pushState({}, document.title, href);
	    }
	    _transformPage(el4, settings, pos, next_index, next, current);
	  };
	
	  /*-------------------------------------------*/
	  /*  Function to move to specified section    */
	  /*-------------------------------------------*/
	
	  var moveTo = function moveTo(el5, page_index) {
	
	    var pos = 0;
	
	    if (typeof el5 == "string") el5 = document.querySelector(el5);
	
	    var current = document.querySelector(settings.sectionContainer + ".active"),
	        next = document.querySelector(settings.sectionContainer + "[data-index='" + page_index + "']");
	
	    if (next) {
	      var next_index = next.dataset.index;
	      _removeClass(current, "active");
	      _addClass(next, "active");
	      _removeClass(document.querySelector(".onepage-pagination li a" + ".active"), "active");
	      _addClass(document.querySelector(".onepage-pagination li a" + "[data-index='" + page_index + "']"), "active");
	
	      body.className = body.className.replace(/\bviewing-page-\d.*?\b/g, '');
	      _addClass(body, "viewing-page-" + next_index);
	
	      pos = (page_index - 1) * 100 * -1;
	
	      if (history.replaceState && settings.updateURL == true) {
	        var href = window.location.href.substr(0, window.location.href.indexOf('#')) + "#" + (parseInt(page_index) - 1);
	        history.pushState({}, document.title, href);
	      }
	      _transformPage(el5, settings, pos, page_index, next, current);
	    }
	  };
	
	  init();
	};
	
	/*------------------------------------------------*/
	/*  Ulitilities Method                            */
	/*------------------------------------------------*/
	
	/*-----------------------------------------------------------*/
	/*  Function by John Resig to replicate extend functionality */
	/*-----------------------------------------------------------*/
	
	Object.extend = function (orig) {
	  if (orig == null) return orig;
	
	  for (var i = 1; i < arguments.length; i++) {
	    var obj = arguments[i];
	    if (obj != null) {
	      for (var prop in obj) {
	        var getter = obj.__lookupGetter__(prop),
	            setter = obj.__lookupSetter__(prop);
	
	        if (getter || setter) {
	          if (getter) orig.__defineGetter__(prop, getter);
	          if (setter) orig.__defineSetter__(prop, setter);
	        } else {
	          orig[prop] = obj[prop];
	        }
	      }
	    }
	  }
	
	  return orig;
	};

/***/ },
/* 8 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }
/******/ ]);
//# sourceMappingURL=main.min.js.map